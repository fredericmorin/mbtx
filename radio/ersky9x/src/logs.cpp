// Taken from logs.cpp in openTx
/*
 * Authors (alphabetical order)
 * - Andre Bernet <bernet.andre@gmail.com>
 * - Andreas Weitl
 * - Bertrand Songis <bsongis@gmail.com>
 * - Bryan J. Rentoul (Gruvin) <gruvin@gmail.com>
 * - Cameron Weeks <th9xer@gmail.com>
 * - Erez Raviv
 * - Gabriel Birkus
 * - Jean-Pierre Parisy
 * - Karl Szmutny
 * - Michael Blandford
 * - Michal Hlavinka
 * - Pat Mackenzie
 * - Philip Moss
 * - Rob Thomson
 * - Romolo Manfredini <romolo.manfredini@gmail.com>
 * - Thomas Husterer
 *
 * opentx is based on code named
 * gruvin9x by Bryan J. Rentoul: http://code.google.com/p/gruvin9x/,
 * er9x by Erez Raviv: http://code.google.com/p/er9x/,
 * and the original (and ongoing) project by
 * Thomas Husterer, th9x: http://code.google.com/p/th9x/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#include "ersky9x.h"
#include "ff.h"
#include "myeeprom.h"
#include "frsky.h"
#include "string.h"
#include <stdlib.h>
#include "menus.h"
#ifndef SIMU
#include "CoOS.h"
#endif

#ifdef BLUETOOTH
#include "bluetooth.h"
#endif

//#define NULL 0

extern int16_t AltOffset ;
extern uint16_t LogTimer ;

FIL g_oLogFile = {0};
const char *g_logError = NULL ;
uint8_t logDelay;
uint8_t RawLogging ;

#define RAW_BUFFER_SIZE		128
uint8_t RawBuffer0[RAW_BUFFER_SIZE] ;
uint8_t RawBuffer1[RAW_BUFFER_SIZE] ;
uint16_t RawIndex ;
uint8_t RawActiveBuffer ;
uint8_t RawWriteBuffer ;

// Master telemetry/logging index
//const uint8_t LogIndex[] =
//{
//
//} ;


void rawLogByte( uint8_t byte )
{
	uint8_t *p ;
	p = RawActiveBuffer ? RawBuffer1 : RawBuffer0 ;

	if ( RawLogging == 2 )
	{
    char c = byte >> 4 ;
    c += c>9 ? 'A'-10 : '0';
		p[RawIndex++] = c ;
    c = byte & 0x0F ;
    c += c>9 ? 'A'-10 : '0';
		p[RawIndex++] = c ;
		if ( RawIndex >= RAW_BUFFER_SIZE-2 )
		{
			p[RAW_BUFFER_SIZE-2] = '\r' ;
			p[RAW_BUFFER_SIZE-1] = '\n' ;
			RawIndex = RAW_BUFFER_SIZE ;
		}
	}
	else
	{
		p[RawIndex++] = byte ;
	}
	if ( RawIndex >= RAW_BUFFER_SIZE )
	{
		RawIndex = 0 ;
		RawWriteBuffer = 0x80 | RawActiveBuffer ;
		RawActiveBuffer = RawActiveBuffer ? 0 : 1 ;
	}
}

void rawStartLogging()
{
	RawIndex = 0 ;
	RawActiveBuffer = 0 ;
	RawWriteBuffer = 0 ;
}

#define LOGS_PATH           "/LOGS"   // no trailing slash = important

void setFilenameDateTime( char *filename, uint32_t includeTime )
{
  filename[0] = '-';

	div_t qr = div( Time.year, 10);
  filename[4] = '0' + qr.rem;
  qr = div(qr.quot, 10);
  filename[3] = '0' + qr.rem;
  qr = div(qr.quot, 10);
  filename[2] = '0' + qr.rem;
  filename[1] = '0' + qr.quot;
  filename[5] = '-';
  qr = div( Time.month, 10);
  filename[7] = '0' + qr.rem;
  filename[6] = '0' + qr.quot;
  filename[8] = '-';
  qr = div( Time.date, 10);
  filename[10] = '0' + qr.rem;
  filename[9] = '0' + qr.quot;
	if ( includeTime )
	{
  	filename[11] = '-';
  	qr = div( Time.hour, 10);
	  filename[13] = '0' + qr.rem;
  	filename[12] = '0' + qr.quot;
  	qr = div( Time.minute, 10);
	  filename[15] = '0' + qr.rem;
  	filename[14] = '0' + qr.quot;
  	qr = div( Time.second, 10);
	  filename[17] = '0' + qr.rem;
  	filename[16] = '0' + qr.quot;
	}

}

uint32_t isLogEnabled( uint32_t index )
{
#ifdef BITBAND_SRAM_REF
	uint32_t *p ;
	p = (uint32_t *) (BITBAND_SRAM_BASE + ((uint32_t)&g_model.LogDisable - BITBAND_SRAM_REF) * 32) ;
	return p[index] ^ 1 ;
#else
	uint32_t bit ;
	uint32_t offset ;
	offset = index >> 5 ;
	bit = 1 << (index & 0x0000001F) ;
	return (g_model.LogDisable[offset] & bit) == 0 ;
#endif
}

//uint32_t isLogEnabledBitBand( uint32_t index )
//{
//	uint32_t *p ;
//	p = (uint32_t *) (BITBAND_SRAM_BASE + ((uint32_t)&g_model.LogDisable - BITBAND_SRAM_REF) * 32) ;
//	return p[index] == 0 ;
//}

void singleHeading( uint32_t enable, const char*heading )
{
	if ( isLogEnabled( enable ) )
	{
 		f_puts( heading, &g_oLogFile);
	}
}

void logSingleNumber( uint32_t enable, int32_t value )
{
	if ( isLogEnabled( enable ) )
	{
		f_printf(&g_oLogFile, ",%d", value ) ;
	}
}

void logSingleDiv100( uint32_t enable, int32_t value )
{
	div_t qr ;
	if ( isLogEnabled( enable ) )
	{
		qr = div( (int)value, (int)100 ) ;
		f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
	}
}

uint32_t alternateText( uint8_t *text, uint8_t *name )
{
	text[1] = *name++ ;
	if ( text[1] && (text[1] != ' ') )
	{
		text[0] = ',' ;
		text[2] = *name++ ;
		text[3] = *name++ ;
		text[4] = *name ;
		text[5] = 0 ;
		return 1 ;
	}
	return 0 ;
}


const char *openLogs()
{
  // Determine and set log file filename
  FRESULT result;
  DIR folder;
  char filename[50]; // /LOGS/modelnamexxx-2013-01-01.log

#ifdef PCBSKY
  if ( SdMounted == 0 )
#endif
#if defined(PCBX9D) || defined(PCB9XT)
extern uint32_t sdMounted( void ) ;
  if ( sdMounted() == 0 )
#endif
    return "NO SD CARD" ;

  strcpy( filename, LOGS_PATH ) ;

  result = f_opendir( &folder, filename) ;
  if (result != FR_OK)
	{
    if (result == FR_NO_PATH)
      result = f_mkdir(filename) ;
    if (result != FR_OK)
      return "SD CARD ERROR" ; // SDCARD_ERROR(result) ;
  }

  filename[sizeof(LOGS_PATH)-1] = '/';
  memcpy(&filename[sizeof(LOGS_PATH)], g_model.name, sizeof(g_model.name));
  filename[sizeof(LOGS_PATH)+sizeof(g_model.name)] = '\0';

  uint8_t i = sizeof(LOGS_PATH)+sizeof(g_model.name)-1 ;
  uint8_t len = 0 ;
  while (i>sizeof(LOGS_PATH)-1)
	{
		uint8_t c = filename[i] ;
    if (!len && c && ( c != ' ') )
		{
      len = i+1 ;
		}
    if (len)
		{
      if ( c )
			{
        if ( c == ' ' )
				{
					c = '_' ;
				}
			}
      else
			{
				c = '_' ;
			}
			filename[i] = c ;
    }
    i -= 1 ;
  }

  if (len == 0)
	{
    uint8_t num = g_eeGeneral.currModel + 1;
    strcpy_P(&filename[sizeof(LOGS_PATH)], "MODEL" ) ;
    filename[sizeof(LOGS_PATH) + 5] = (char)((num / 10) + '0');
    filename[sizeof(LOGS_PATH) + 5 + 1] = (char)((num % 10) + '0');
    len = sizeof(LOGS_PATH) + 5 + 2;
  }

	setFilenameDateTime( &filename[len], g_model.logNew ) ;

  strcpy_P(&filename[len + (g_model.logNew ? 18 : 11) ], RawLogging ? ".raw" : ".csv" ) ;

	CoTickDelay(1) ;					// 2mS
  result = f_open(&g_oLogFile, filename, FA_OPEN_ALWAYS | FA_WRITE) ;
	CoTickDelay(1) ;					// 2mS
  if (result != FR_OK)
	{
    return "SD CARD ERROR" ; // SDCARD_ERROR(result) ;
  }

  if (f_size(&g_oLogFile) != 0)
	{
		CoTickDelay(1) ;					// 2mS
    result = f_lseek(&g_oLogFile, f_size(&g_oLogFile)); // append
    if (result != FR_OK)
		{
      return "SD CARD ERROR" ; // SDCARD_ERROR(result) ;
    }
  }
	CoTickDelay(1) ;					// 2mS

	if ( RawLogging )
	{
	  f_puts("Raw Log File\n", &g_oLogFile) ;
  	return NULL ;
	}

  f_puts("Time,Elapsed,Valid", &g_oLogFile) ;

	singleHeading( LOG_RSSI, ",RxRSSI" ) ;

//	if ( isLogEnabled( LOG_RSSI ) )
//	{
//  	f_puts(",RxRSSI", &g_oLogFile) ;
//	}
	singleHeading( LOG_TSSI, FrskyTelemetryType == FRSKY_TEL_SPORT ? ",Swr" : ",TxRSSI" ) ;
//	if ( isLogEnabled( LOG_TSSI ) )
//	{
//  	f_puts( FrskyTelemetryType == FRSKY_TEL_SPORT ? ",Swr" : ",TxRSSI", &g_oLogFile ) ;
//	}
  if ( g_model.DsmTelemetry )
	{
		f_puts(",Fades,Holds", &g_oLogFile) ;
	}
	uint32_t j ;
	singleHeading( LOG_A1, ",A1" ) ;
	singleHeading( LOG_A2, ",A2" ) ;
//	for ( j = 0 ; j < 2 ; j += 1 )
//	{
//		if ( isLogEnabled( LOG_A1 + j ) )
//		{
//  		f_puts(&",A1\0,A2"[j*4], &g_oLogFile);
//		}
//	}

	singleHeading( LOG_ALT, ",Altb" ) ;
	singleHeading( LOG_GALT, ",Altg" ) ;
//	for ( j = 0 ; j < 2 ; j += 1 )
//	{
//		if ( isLogEnabled( LOG_ALT + j ) )
//		{
//  		f_puts(&",AltB\0,AltG"[j*6], &g_oLogFile);
//		}
//	}
	singleHeading( LOG_TEMP1, ",Temp1" ) ;
	singleHeading( LOG_TEMP2, ",Temp2" ) ;
//	for ( j = 0 ; j < 2 ; j += 1 )
//	{
//		if ( isLogEnabled( LOG_TEMP1 + j ) )
//		{
//  		f_puts(&",Temp1\0,Temp2"[j*7], &g_oLogFile);
//		}
//	}

	singleHeading( LOG_RPM, ",RPM" ) ;
//	if ( isLogEnabled( LOG_RPM ) )
//	{
// 		f_puts(",RPM", &g_oLogFile);
//	}
	singleHeading( LOG_AMPS, ",Amps" ) ;
//	if ( isLogEnabled( LOG_AMPS ) )
//	{
// 		f_puts(",Amps", &g_oLogFile);
//	}
	singleHeading( LOG_FASV, ",Volts" ) ;
//	if ( isLogEnabled( LOG_FASV ) )
//	{
// 		f_puts(",Volts", &g_oLogFile);
//	}
	singleHeading( LOG_MAH, ",mAH" ) ;
//	if ( isLogEnabled( LOG_MAH ) )
//	{
// 		f_puts(",mAH", &g_oLogFile);
//	}
	singleHeading( LOG_BATT, ",TxBat" ) ;
//	if ( isLogEnabled( LOG_BATT ) )
//	{
// 		f_puts(",TxBat", &g_oLogFile);
//	}
	singleHeading( LOG_VSPD, ",Vspd" ) ;
//	if ( isLogEnabled( LOG_VSPD ) )
//	{
//		f_puts(",Vspd", &g_oLogFile);
//	}
	singleHeading( LOG_RXV, ",RxV" ) ;
//	if ( isLogEnabled( LOG_RXV ) )
//	{
//		f_puts(",RxV", &g_oLogFile);
//	}
	singleHeading( LOG_A3, ",A3" ) ;
//	if ( isLogEnabled( LOG_A3 ) )
//	{
//		f_puts(",A3", &g_oLogFile);
//	}
	singleHeading( LOG_A4, ",A4" ) ;
//	if ( isLogEnabled( LOG_A4 ) )
//	{
//		f_puts(",A4", &g_oLogFile);
//	}
	singleHeading( LOG_HDG, ",Hdg" ) ;
//	if ( isLogEnabled( LOG_HDG ) )
//	{
//		f_puts(",Hdg", &g_oLogFile);
//	}
	singleHeading( LOG_LAT, ",Lat" ) ;
//	if ( isLogEnabled( LOG_LAT ) )
//	{
//		f_puts(",Lat", &g_oLogFile);
//	}
	singleHeading( LOG_LONG, ",Long" ) ;
//	if ( isLogEnabled( LOG_LONG ) )
//	{
//		f_puts(",Long", &g_oLogFile);
//	}
	singleHeading( LOG_FUEL, ",Fuel" ) ;
//	if ( isLogEnabled( LOG_FUEL ) )
//	{
//		f_puts(",Fuel", &g_oLogFile);
//	}
	singleHeading( LOG_GSPD, ",Gspd" ) ;
//	if ( isLogEnabled( LOG_GSPD ) )
//	{
//		f_puts(",Gspd", &g_oLogFile);
//	}
	singleHeading( LOG_CVLT, ",Cvlt" ) ;
//	if ( isLogEnabled( LOG_CVLT ) )
//	{
//		f_puts(",Cvlt", &g_oLogFile);
//	}
	singleHeading( LOG_CTOT, ",Ctot" ) ;
//	if ( isLogEnabled( LOG_CTOT ) )
//	{
//		f_puts(",Ctot", &g_oLogFile);
//	}

	for ( j = 0 ; j < NUM_SCALERS ; j += 1 )
	{
		if ( isLogEnabled( LOG_SC1 + j ) )
		{
			uint8_t text[6] ;
			if ( alternateText( text, &g_model.Scalers[j].name[0] ) )
			{
	  		f_puts((const char *)text, &g_oLogFile);
			}
			else
			{
  			f_puts(&",SC1\0,SC2\0,SC3\0,SC4\0,SC5\0,SC6\0,SC7\0,SC8"[j*5], &g_oLogFile);
			}
		}
	}
	for ( j = 0 ; j < 7 ; j += 1 )
	{
		if ( isLogEnabled( LOG_GVAR1 + j ) )
		{
  		f_puts(&",GV1\0,GV2\0,GV3\0,GV4\0,GV5\0,GV6\0,GV7"[j*5], &g_oLogFile);
		}
	}

#ifdef BLUETOOTH
	singleHeading( LOG_BTRX, ",BtRx" ) ;
//	if ( isLogEnabled( LOG_BTRX ) )
//	{
//  	f_puts(",BtRx", &g_oLogFile);
//	}
#endif
	singleHeading( LOG_ASPD, ",Aspd" ) ;
//	if ( isLogEnabled( LOG_ASPD ) )
//	{
//  	f_puts(",Aspd", &g_oLogFile);
//  }

	singleHeading( LOG_RBV1, ",RBv1" ) ;
//	if ( isLogEnabled( LOG_RBV1 ) )
//	{
//		f_puts(",RBv1", &g_oLogFile);
//  }
	singleHeading( LOG_RBA1, ",RBa1" ) ;
//	if ( isLogEnabled( LOG_RBA1 ) )
//	{
//		f_puts(",RBa1", &g_oLogFile);
//  }
	singleHeading( LOG_RBV2, ",RBv2" ) ;
//	if ( isLogEnabled( LOG_RBV2 ) )
//	{
//		f_puts(",RBv2", &g_oLogFile);
//  }
	singleHeading( LOG_RBA1, ",RBa2" ) ;
//	if ( isLogEnabled( LOG_RBA2 ) )
//	{
//		f_puts(",RBa2", &g_oLogFile);
//  }
	singleHeading( LOG_RBM1, ",RBm1" ) ;
//	if ( isLogEnabled( LOG_RBM1 ) )
//	{
//		f_puts(",RBm1", &g_oLogFile);
//  }
	singleHeading( LOG_RBM2, ",RBm2" ) ;
//	if ( isLogEnabled( LOG_RBM2 ) )
//	{
//		f_puts(",RBm2", &g_oLogFile);
//  }
	singleHeading( LOG_RBSV, ",RBsV" ) ;
//	if ( isLogEnabled( LOG_RBSV ) )
//	{
//		f_puts(",RBsV", &g_oLogFile);
//  }
	singleHeading( LOG_RBST, ",RBST" ) ;
//	if ( isLogEnabled( LOG_RBST ) )
//	{
//		f_puts(",RBST", &g_oLogFile);
//  }

	for ( j = 0 ; j < 12 ; j += 1 )
	{
		if ( isLogEnabled( j + ((j > 5) ? LOG_CEL7-6 : LOG_CEL1)) )
		{
  		f_puts(&",Cel1 \0,Cel2 \0,Cel3 \0,Cel4 \0,Cel5 \0,Cel6 \0,Cel7 \0,Cel8 \0,Cel9 \0,Cel10\0,Cel11\0,Cel12"[j*7], &g_oLogFile);
		}
	}

	for ( j = 0 ; j < 6 ; j += 1 )
	{
		if ( isLogEnabled( j + LOG_CUST1 ) )
		{
			uint8_t text[6] ;
			if ( alternateText( text, &g_model.customTelemetryNames[j*4] ) )
			{
	  		f_puts((const char *)text, &g_oLogFile);
			}
			else
			{
	  		f_puts(&",Cus1 \0,Cus2 \0,Cus3 \0,Cus4 \0,Cus5 \0,Cus6 "[j*7], &g_oLogFile);
			}
		}
	}
	singleHeading( LOG_CTOTAL1, ",Ctot1" ) ;
	singleHeading( LOG_CTOTAL2, ",Ctot2" ) ;

	singleHeading( LOG_STK_THR, ",Stk_THR" ) ;
//	if ( isLogEnabled( LOG_STK_THR ) )
//	{
//		f_puts(",Stk_THR", &g_oLogFile);
//	}
	singleHeading( LOG_STK_AIL, ",Stk_AIL" ) ;
//	if ( isLogEnabled( LOG_STK_AIL ) )
//	{
//		f_puts(",Stk_AIL", &g_oLogFile);
//	}
	singleHeading( LOG_STK_ELE, ",Stk_ELE" ) ;
//	if ( isLogEnabled( LOG_STK_ELE ) )
//	{
//		f_puts(",Stk_ELE", &g_oLogFile);
//	}
	singleHeading( LOG_STK_RUD, ",Stk_RUD" ) ;
//	if ( isLogEnabled( LOG_STK_RUD ) )
//	{
//		f_puts(",Stk_RUD", &g_oLogFile);
//	}
	f_puts("\n", &g_oLogFile);

  return NULL ;
}

void closeLogs()
{
  f_close(&g_oLogFile) ;
}

// TODO test when disk full
void writeLogs()
{
  static const char * error_displayed = NULL ;
	div_t qr ;
  UINT written ;

      if (!g_oLogFile.fs)
			{
        const char * result = openLogs();
        if (result != NULL)
				{
          if (result != error_displayed)
					{
            error_displayed = result ;
          }
          return ;
        }
      }

	if ( RawLogging )
	{
		if ( RawWriteBuffer & 0x80 )
		{
			uint8_t *p ;
			RawWriteBuffer &= 1 ;
			p = RawWriteBuffer ? RawBuffer1 : RawBuffer0 ;
  		f_write( &g_oLogFile, (BYTE *)p, RAW_BUFFER_SIZE, &written ) ;
		}
		return ;
	}

      f_printf(&g_oLogFile, "%02d:%02d:%02d", Time.hour, Time.minute, Time.second ) ;// utm.tm_mday, utm.tm_hour, utm.tm_min, utm.tm_sec, g_ms100);
			qr = div( LogTimer, 120 ) ;
			uint16_t secs = qr.rem/2 ;
			qr = div( qr.quot, 60 ) ;
      f_printf(&g_oLogFile, ",'%d:%02d:%02d", qr.quot, qr.rem, secs ) ;	// Elapsed log time
			if ( LogTimer & 1  )
			{
      	f_printf(&g_oLogFile,  ".5" ) ;	// Elapsed log time
			}
      f_printf(&g_oLogFile, ",%d", frskyUsrStreaming * 100 + frskyStreaming ) ;


			logSingleNumber( LOG_RSSI, FrskyHubData[FR_RXRSI_COPY] ) ;
//			if ( isLogEnabled( LOG_RSSI ) )
//      {
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_RXRSI_COPY] ) ;
//      }
			logSingleNumber( LOG_TSSI, FrskyHubData[FR_TXRSI_COPY] ) ;
//			if ( isLogEnabled( LOG_TSSI ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_TXRSI_COPY]) ;
//			}
			if ( g_model.DsmTelemetry )
			{
				f_printf(&g_oLogFile, ",%d,%d", DsmABLRFH[4],DsmABLRFH[5] ) ;
			}

			int16_t value ;
			uint8_t dps ;
			if ( isLogEnabled( LOG_A1 ) )
			{
				value = logAxScale( 0, &dps ) ;
				qr = div( value, dps ) ;
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
			if ( isLogEnabled( LOG_A2 ) )
			{
				value = logAxScale( 1, &dps ) ;
				qr = div( value, dps ) ;
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}

			if ( isLogEnabled( LOG_ALT ) )
			{
				value =  FrskyHubData[FR_ALT_BARO] + AltOffset ;
				if (g_model.FrSkyUsrProto == 0)  // Hub
				{
      		if ( g_model.FrSkyImperial )
					{
      	 		value = m_to_ft( value ) ;
					}
				}
				value /= 10 ;
				f_printf(&g_oLogFile, ",%d", value ) ;
			}
			logSingleNumber( LOG_GALT, FrskyHubData[TELEM_GPS_ALT] ) ;
//			if ( isLogEnabled( LOG_GALT ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[TELEM_GPS_ALT]) ;
//			}
			logSingleNumber( LOG_TEMP1, FrskyHubData[FR_TEMP1] ) ;
//			if ( isLogEnabled( LOG_TEMP1 ) )
//			{
//	      f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_TEMP1] ) ;
//      }
			logSingleNumber( LOG_TEMP2, FrskyHubData[FR_TEMP2] ) ;
//			if ( isLogEnabled( LOG_TEMP2 ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_TEMP2] ) ;
//			}
			logSingleNumber( LOG_RPM, FrskyHubData[FR_RPM] ) ;
//			if ( isLogEnabled( LOG_RPM ) )
//			{
//    	  f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_RPM] ) ;
//			}
			if ( isLogEnabled( LOG_AMPS ) )
			{
				qr = div( FrskyHubData[FR_CURRENT], 10);
				if ( qr.rem < 0 )
				{
					qr.rem = - qr.rem ;
				}
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
			if ( isLogEnabled( LOG_FASV ) )
			{
				qr = div( FrskyHubData[FR_VOLTS], 10);
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
			logSingleNumber( LOG_MAH, FrskyHubData[FR_AMP_MAH] ) ;
//			if ( isLogEnabled( LOG_MAH ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_AMP_MAH] ) ;
//			}
			if ( isLogEnabled( LOG_BATT ) )
			{
				qr = div( g_vbat100mV, 10);
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
			if ( isLogEnabled( LOG_VSPD ) )
			{
				char c = ' ' ;
				qr = div( FrskyHubData[FR_VSPD]/10, 10);
				if ( qr.rem < 0 )
				{
					qr.rem = - qr.rem ;
					if ( qr.quot == 0 )
					{
						c = '-' ;
					}
				}
				f_printf(&g_oLogFile, ",%c%d.%d", c, qr.quot, qr.rem ) ;
			}
//			logSingleNumber( LOG_VSPD, FrskyHubData[FR_VSPD] ) ;
//			if ( isLogEnabled( LOG_VSPD ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_VSPD] ) ;
//			}
			if ( isLogEnabled( LOG_RXV ) )
			{
				value = convertRxv( FrskyHubData[FR_RXV] ) ;
				qr = div( value, 10);
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
			logSingleNumber( LOG_A3, FrskyHubData[FR_A3] ) ;
//			if ( isLogEnabled( LOG_A3 ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_A3] ) ;
//			}
			logSingleNumber( LOG_A4, FrskyHubData[FR_A4] ) ;
//			if ( isLogEnabled( LOG_A4 ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_A4] ) ;
//			}
			logSingleNumber( LOG_HDG, FrskyHubData[FR_COURSE] ) ;
//			if ( isLogEnabled( LOG_HDG ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_HOME_DIR] ) ;
//			}

			if ( isLogEnabled( LOG_LAT ) )
			{
				if ( g_eeGeneral.gpsFormat )
				{
					div_t qr ;
					int32_t value ;
					qr = div( FrskyHubData[FR_GPS_LAT], 100 ) ;
					value = qr.rem ;
					value *= 10000 ;
					value += FrskyHubData[FR_GPS_LATd] ;
					value *= 10 ;
					value /= 6 ;
					f_printf(&g_oLogFile, ",%d.%06d%c", qr.quot, value, FrskyHubData[FR_LAT_N_S] ) ;
				}
				else
				{
					f_printf(&g_oLogFile, ",%d.%04d%c", FrskyHubData[FR_GPS_LAT],FrskyHubData[FR_GPS_LATd],FrskyHubData[FR_LAT_N_S] ) ;
				}
			}
			if ( isLogEnabled( LOG_LONG ) )
			{
				if ( g_eeGeneral.gpsFormat )
				{
					div_t qr ;
					int32_t value ;
					qr = div( FrskyHubData[FR_GPS_LONG], 100 ) ;
					value = qr.rem ;
					value *= 10000 ;
					value += FrskyHubData[FR_GPS_LONGd] ;
					value *= 10 ;
					value /= 6 ;
					f_printf(&g_oLogFile, ",%d.%06d%c", qr.quot, value, FrskyHubData[FR_LONG_E_W] ) ;
				}
				else
				{
					f_printf(&g_oLogFile, ",%d.%04d%c", FrskyHubData[FR_GPS_LONG],FrskyHubData[FR_GPS_LONGd],FrskyHubData[FR_LONG_E_W] ) ;
				}
			}

			logSingleNumber( LOG_FUEL, FrskyHubData[FR_FUEL] ) ;
//			if ( isLogEnabled( LOG_FUEL ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_FUEL] ) ;
//			}
			logSingleNumber( LOG_GSPD, FrskyHubData[FR_GPS_SPEED] ) ;
//			if ( isLogEnabled( LOG_GSPD ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_GPS_SPEED] ) ;
//			}

			logSingleDiv100( LOG_CVLT, FrskyHubData[FR_CELL_MIN] ) ;
//			if ( isLogEnabled( LOG_CVLT ) )
//			{
//				qr = div( FrskyHubData[FR_CELL_MIN], 100 ) ;
//				f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
//			}
			if ( isLogEnabled( LOG_CTOT ) )
			{
				qr = div( FrskyHubData[FR_CELLS_TOT], 10 ) ;
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
#ifndef DEBUG_9XT
			//SC1-8
			uint32_t i ;
			for ( i = 0 ; i < NUM_SCALERS ; i += 1 )
			{
				if ( isLogEnabled( LOG_SC1 + i ) )
				{
					uint16_t unit = 0 ;
					const char *ps = ",%d.%d" ;
					uint8_t num_decimals = 0 ;
					value = calc_scaler( i, &unit, &num_decimals ) ;
					if ( num_decimals == 0 )
					{
						num_decimals = 1 ;
					}
					else if ( num_decimals == 1 )
					{
						num_decimals = 10 ;
					}
					else
					{
						num_decimals = 100 ;
						ps = ",%d.%02d" ;
					}
					qr = div( value, num_decimals ) ;
					if ( qr.rem < 0 )
					{
						qr.rem = - qr.rem ;
					}
					f_printf(&g_oLogFile, ps, qr.quot, qr.rem ) ;
				}
			}
			for ( i = 0 ; i < 7 ; i += 1 )
			{
				logSingleNumber( LOG_GVAR1 + i, g_model.gvars[i].gvar ) ;
//				if ( isLogEnabled( LOG_GVAR1 + i ) )
//				{
//					f_printf(&g_oLogFile, ",%d", g_model.gvars[i].gvar ) ;
//				}
			}
#endif

#ifdef DEBUG_9XT
extern uint8_t M64MainTimer ;
extern uint8_t M64BackupTimer ;
extern uint8_t M64ResetCount ;
extern uint16_t M64RxCount ;
extern uint16_t RemBitMeasure ;
				f_printf(&g_oLogFile, ",%d,%d,%d", M64MainTimer, M64BackupTimer, M64ResetCount ) ;
extern uint8_t M64Buttons ;
extern uint16_t M64Switches ;
				f_printf(&g_oLogFile, ",%d,%d", RemBitMeasure, M64RxCount ) ;
				M64RxCount = 0 ;
				f_printf(&g_oLogFile, ",%d,%d,", M64Buttons, M64Switches ) ;
extern uint8_t M64DebugData[] ;
extern uint8_t SlaveTempReceiveBuffer[] ;
				uint32_t i ;
				for ( i = 0 ; i < 22 ; i += 1 )
				{
					f_printf(&g_oLogFile, "%02X", SlaveTempReceiveBuffer[i] ) ;
				}
				f_printf(&g_oLogFile, "," ) ;
				for ( i = 0 ; i < 12 ; i += 1 )
				{
					f_printf(&g_oLogFile, "%02X", M64DebugData[i] ) ;
				}
#endif

#ifdef BLUETOOTH
			logSingleNumber( LOG_BTRX, BtControl.BtRxOccured ) ;
//				if ( isLogEnabled( LOG_BTRX ) )
//				{
////extern uint8_t BtRxOccured ;
//					f_printf(&g_oLogFile, ",%d", BtControl.BtRxOccured ) ;
//				}
#endif
			logSingleNumber( LOG_ASPD, FrskyHubData[FR_AIRSPEED] ) ;
//			if ( isLogEnabled( LOG_ASPD ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_AIRSPEED] ) ;
//			}
			logSingleDiv100( LOG_RBV1, FrskyHubData[FR_RBOX_B1_V] ) ;
//			if ( isLogEnabled( LOG_RBV1 ) )
//			{
//				qr = div( FrskyHubData[FR_RBOX_B1_V], 100 ) ;
//				f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
//			}
			logSingleDiv100( LOG_RBA1, FrskyHubData[FR_RBOX_B1_A] ) ;
//			if ( isLogEnabled( LOG_RBA1 ) )
//			{
//				qr = div( FrskyHubData[FR_RBOX_B1_A], 100 ) ;
//				f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
//			}
			logSingleDiv100( LOG_RBV2, FrskyHubData[FR_RBOX_B2_V] ) ;
//			if ( isLogEnabled( LOG_RBV2 ) )
//			{
//				qr = div( FrskyHubData[FR_RBOX_B2_V], 100 ) ;
//				f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
//			}
			logSingleDiv100( LOG_RBA2, FrskyHubData[FR_RBOX_B2_A] ) ;
//			if ( isLogEnabled( LOG_RBA2 ) )
//			{
//				qr = div( FrskyHubData[FR_RBOX_B2_A], 100 ) ;
//				f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
//			}
			logSingleNumber( LOG_RBM1, FrskyHubData[FR_RBOX_B1_CAP] ) ;
//			if ( isLogEnabled( LOG_RBM1 ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_RBOX_B1_CAP] ) ;
//			}
			logSingleNumber( LOG_RBM2, FrskyHubData[FR_RBOX_B2_CAP] ) ;
//			if ( isLogEnabled( LOG_RBM2 ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_RBOX_B2_CAP] ) ;
//			}
			logSingleNumber( LOG_RBSV, FrskyHubData[FR_RBOX_SERVO] ) ;
//			if ( isLogEnabled( LOG_RBSV ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_RBOX_SERVO] ) ;
//			}
			logSingleNumber( LOG_RBST, FrskyHubData[FR_RBOX_STATE] ) ;
//			if ( isLogEnabled( LOG_RBST ) )
//			{
//				f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_RBOX_STATE] ) ;
//			}
			for ( i = 0 ; i < 12 ; i += 1 )
			{
				logSingleDiv100( i + ((i > 5) ? LOG_CEL7-6 : LOG_CEL1), FrskyHubData[FR_CELL1 + i] ) ;
//				if ( isLogEnabled( i + ((i > 5) ? LOG_CEL7-6 : LOG_CEL1)) )
//				{
//					qr = div( FrskyHubData[FR_CELL1 + i], 100 ) ;
//					f_printf(&g_oLogFile, ",%d.%02d", qr.quot, qr.rem ) ;
//				}
			}
			for ( i = 0 ; i < 6 ; i += 1 )
			{
				logSingleNumber( i + LOG_CUST1, FrskyHubData[FR_CUST1 + i] ) ;
//				if ( isLogEnabled( i + LOG_CUST1 ) )
//				{
//					f_printf(&g_oLogFile, ",%d", FrskyHubData[FR_CUST1 + i] ) ;
//				}
			}

			if ( isLogEnabled( LOG_CTOTAL1 ) )
			{
				qr = div( FrskyHubData[FR_CELLS_TOTAL1], 10 ) ;
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}
			if ( isLogEnabled( LOG_CTOTAL2 ) )
			{
				qr = div( FrskyHubData[FR_CELLS_TOTAL2], 10 ) ;
				f_printf(&g_oLogFile, ",%d.%d", qr.quot, qr.rem ) ;
			}

			logSingleNumber( LOG_STK_THR, (int32_t)calibratedStick[2]*100/1024 ) ;
//			if ( isLogEnabled( LOG_STK_THR ) )
//			{
//				f_printf(&g_oLogFile, ",%d", (int32_t)calibratedStick[2]*100/1024 ) ;
//			}
			logSingleNumber( LOG_STK_AIL, (int32_t)calibratedStick[3]*100/1024 ) ;
//			if ( isLogEnabled( LOG_STK_AIL ) )
//			{
//				f_printf(&g_oLogFile, ",%d", (int32_t)calibratedStick[3]*100/1024 ) ;
//			}
			logSingleNumber( LOG_STK_ELE, (int32_t)calibratedStick[1]*100/1024 ) ;
//			if ( isLogEnabled( LOG_STK_ELE ) )
//			{
//				f_printf(&g_oLogFile, ",%d", (int32_t)calibratedStick[1]*100/1024 ) ;
//			}
			logSingleNumber( LOG_STK_RUD, (int32_t)calibratedStick[0]*100/1024 ) ;
//			if ( isLogEnabled( LOG_STK_RUD ) )
//			{
//				f_printf(&g_oLogFile, ",%d", (int32_t)calibratedStick[0]*100/1024 ) ;
//			}

			f_printf(&g_oLogFile, "\n" ) ;

}

#define _CODE_PAGE 437

/*------------------------------------------------------------------------*/
/* Unicode - Local code bidirectional converter  (C)ChaN, 2012            */
/* (SBCS code pages)                                                      */
/*------------------------------------------------------------------------*/
/*  437   U.S. (OEM)
/   720   Arabic (OEM)
/   1256  Arabic (Windows)
/   737   Greek (OEM)
/   1253  Greek (Windows)
/   1250  Central Europe (Windows)
/   775   Baltic (OEM)
/   1257  Baltic (Windows)
/   850   Multilingual Latin 1 (OEM)
/   852   Latin 2 (OEM)
/   1252  Latin 1 (Windows)
/   855   Cyrillic (OEM)
/   1251  Cyrillic (Windows)
/   866   Russian (OEM)
/   857   Turkish (OEM)
/   1254  Turkish (Windows)
/   858   Multilingual Latin 1 + Euro (OEM)
/   862   Hebrew (OEM)
/   1255  Hebrew (Windows)
/   874   Thai (OEM, Windows)
/   1258  Vietnam (OEM, Windows)
*/


#if _CODE_PAGE == 437
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP437(0x80-0xFF) to Unicode conversion table */
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
	0x00FF, 0x00D6, 0x00DC, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
	0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
	0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 720
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP720(0x80-0xFF) to Unicode conversion table */
	0x0000, 0x0000, 0x00E9, 0x00E2, 0x0000, 0x00E0, 0x0000, 0x00E7,
	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x0000, 0x0000, 0x0000,
	0x0000, 0x0651, 0x0652, 0x00F4, 0x00A4, 0x0640, 0x00FB, 0x00F9,
	0x0621, 0x0622, 0x0623, 0x0624, 0x00A3, 0x0625, 0x0626, 0x0627,
	0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0641, 0x00B5, 0x0642,
	0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A,
	0x2261, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0x0650, 0x2248,
	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 737
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP737(0x80-0xFF) to Unicode conversion table */
	0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398,
	0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 0x03A0,
	0x03A1, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9,
	0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8,
	0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 0x03C0,
	0x03C1, 0x03C3, 0x03C2, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x03C9, 0x03AC, 0x03AD, 0x03AE, 0x03CA, 0x03AF, 0x03CC, 0x03CD,
	0x03CB, 0x03CE, 0x0386, 0x0388, 0x0389, 0x038A, 0x038C, 0x038E,
	0x038F, 0x00B1, 0x2265, 0x2264, 0x03AA, 0x03AB, 0x00F7, 0x2248,
	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 775
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP775(0x80-0xFF) to Unicode conversion table */
	0x0106, 0x00FC, 0x00E9, 0x0101, 0x00E4, 0x0123, 0x00E5, 0x0107,
	0x0142, 0x0113, 0x0156, 0x0157, 0x012B, 0x0179, 0x00C4, 0x00C5,
	0x00C9, 0x00E6, 0x00C6, 0x014D, 0x00F6, 0x0122, 0x00A2, 0x015A,
	0x015B, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x00A4,
	0x0100, 0x012A, 0x00F3, 0x017B, 0x017C, 0x017A, 0x201D, 0x00A6,
	0x00A9, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x0141, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0104, 0x010C, 0x0118,
	0x0116, 0x2563, 0x2551, 0x2557, 0x255D, 0x012E, 0x0160, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0172, 0x016A,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x017D,
	0x0105, 0x010D, 0x0119, 0x0117, 0x012F, 0x0161, 0x0173, 0x016B,
	0x017E, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x00D3, 0x00DF, 0x014C, 0x0143, 0x00F5, 0x00D5, 0x00B5, 0x0144,
	0x0136, 0x0137, 0x013B, 0x013C, 0x0146, 0x0112, 0x0145, 0x2019,
	0x00AD, 0x00B1, 0x201C, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x201E,
	0x00B0, 0x2219, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 850
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP850(0x80-0xFF) to Unicode conversion table */
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
	0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
	0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE,
	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
	0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 852
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP852(0x80-0xFF) to Unicode conversion table */
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x016F, 0x0107, 0x00E7,
	0x0142, 0x00EB, 0x0150, 0x0151, 0x00EE, 0x0179, 0x00C4, 0x0106,
	0x00C9, 0x0139, 0x013A, 0x00F4, 0x00F6, 0x013D, 0x013E, 0x015A,
	0x015B, 0x00D6, 0x00DC, 0x0164, 0x0165, 0x0141, 0x00D7, 0x010D,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x0104, 0x0105, 0x017D, 0x017E,
	0x0118, 0x0119, 0x00AC, 0x017A, 0x010C, 0x015F, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x011A,
	0x015E, 0x2563, 0x2551, 0x2557, 0x255D, 0x017B, 0x017C, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0102, 0x0103,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x0111, 0x0110, 0x010E, 0x00CB, 0x010F, 0x0147, 0x00CD, 0x00CE,
	0x011B, 0x2518, 0x250C, 0x2588, 0x2584, 0x0162, 0x016E, 0x2580,
	0x00D3, 0x00DF, 0x00D4, 0x0143, 0x0144, 0x0148, 0x0160, 0x0161,
	0x0154, 0x00DA, 0x0155, 0x0170, 0x00FD, 0x00DD, 0x0163, 0x00B4,
	0x00AD, 0x02DD, 0x02DB, 0x02C7, 0x02D8, 0x00A7, 0x00F7, 0x00B8,
	0x00B0, 0x00A8, 0x02D9, 0x0171, 0x0158, 0x0159, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 855
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP855(0x80-0xFF) to Unicode conversion table */
	0x0452, 0x0402, 0x0453, 0x0403, 0x0451, 0x0401, 0x0454, 0x0404,
	0x0455, 0x0405, 0x0456, 0x0406, 0x0457, 0x0407, 0x0458, 0x0408,
	0x0459, 0x0409, 0x045A, 0x040A, 0x045B, 0x040B, 0x045C, 0x040C,
	0x045E, 0x040E, 0x045F, 0x040F, 0x044E, 0x042E, 0x044A, 0x042A,
	0x0430, 0x0410, 0x0431, 0x0411, 0x0446, 0x0426, 0x0434, 0x0414,
	0x0435, 0x0415, 0x0444, 0x0424, 0x0433, 0x0413, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0445, 0x0425, 0x0438,
	0x0418, 0x2563, 0x2551, 0x2557, 0x255D, 0x0439, 0x0419, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x043A, 0x041A,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x043B, 0x041B, 0x043C, 0x041C, 0x043D, 0x041D, 0x043E, 0x041E,
	0x043F, 0x2518, 0x250C, 0x2588, 0x2584, 0x041F, 0x044F, 0x2580,
	0x042F, 0x0440, 0x0420, 0x0441, 0x0421, 0x0442, 0x0422, 0x0443,
	0x0423, 0x0436, 0x0416, 0x0432, 0x0412, 0x044C, 0x042C, 0x2116,
	0x00AD, 0x044B, 0x042B, 0x0437, 0x0417, 0x0448, 0x0428, 0x044D,
	0x042D, 0x0449, 0x0429, 0x0447, 0x0427, 0x00A7, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 857
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP857(0x80-0xFF) to Unicode conversion table */
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x0131, 0x00C4, 0x00C5,
	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
	0x0130, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x015E, 0x015F,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x011E, 0x011F,
	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
	0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x00BA, 0x00AA, 0x00CA, 0x00CB, 0x00C8, 0x0000, 0x00CD, 0x00CE,
	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x0000,
	0x00D7, 0x00DA, 0x00DB, 0x00D9, 0x00EC, 0x00FF, 0x00AF, 0x00B4,
	0x00AD, 0x00B1, 0x0000, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 858
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP858(0x80-0xFF) to Unicode conversion table */
	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
	0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
	0x00A9, 0x2563, 0x2551, 0x2557, 0x2550, 0x00A2, 0x00A5, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x20AC, 0x00CD, 0x00CE,
	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00C6, 0x00CC, 0x2580,
	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
	0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 862
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP862(0x80-0xFF) to Unicode conversion table */
	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
	0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
	0x05E8, 0x05E9, 0x05EA, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
	0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
	0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 866
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP866(0x80-0xFF) to Unicode conversion table */
	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
	0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
	0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
	0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
	0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
	0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E,
	0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0
};

#elif _CODE_PAGE == 874
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP874(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x0000, 0x0000, 0x0000, 0x2026, 0x0000, 0x0000,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
	0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
	0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
	0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
	0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
	0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
	0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
	0x0E38, 0x0E39, 0x0E3A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0E3F,
	0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
	0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
	0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
	0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0x0000, 0x0000, 0x0000, 0x0000
};

#elif _CODE_PAGE == 1250
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1250(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021,
	0x0000, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x0000, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
	0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
	0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
	0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
	0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
	0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
	0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
	0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
	0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
	0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
	0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};

#elif _CODE_PAGE == 1251
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1251(0x80-0xFF) to Unicode conversion table */
	0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
	0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
	0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x0000, 0x2111, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
	0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
	0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
	0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
	0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
	0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
	0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
	0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
	0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
};

#elif _CODE_PAGE == 1252
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1252(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
	0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0000, 0x017D, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0000, 0x017E, 0x0178,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
	0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
	0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
	0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};

#elif _CODE_PAGE == 1253
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1253(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
	0x0000, 0x2030, 0x0000, 0x2039, 0x000C, 0x0000, 0x0000, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
	0x00A0, 0x0385, 0x0386, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x0000, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x2015,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x00B5, 0x00B6, 0x00B7,
	0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
	0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
	0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
	0x03A0, 0x03A1, 0x0000, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
	0x03A8, 0x03A9, 0x03AA, 0x03AD, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
	0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
	0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
	0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
	0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x0000
};

#elif _CODE_PAGE == 1254
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1254(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x210A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
	0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0000, 0x0000, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0000, 0x0000, 0x0178,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
	0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
	0x00D8, 0x00D9, 0x00DA, 0x00BD, 0x00DC, 0x0130, 0x015E, 0x00DF,
	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
	0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
};

#elif _CODE_PAGE == 1255
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1255(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
	0x02C6, 0x2030, 0x0000, 0x2039, 0x0000, 0x0000, 0x0000, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x02DC, 0x2122, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
	0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7,
	0x05B8, 0x05B9, 0x0000, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF,
	0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05F0, 0x05F1, 0x05F2, 0x05F3,
	0x05F4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
	0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
	0x05E8, 0x05E9, 0x05EA, 0x0000, 0x0000, 0x200E, 0x200F, 0x0000
};

#elif _CODE_PAGE == 1256
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1256(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
	0x02C6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
	0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x06A9, 0x2122, 0x0691, 0x203A, 0x0153, 0x200C, 0x200D, 0x06BA,
	0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x06BE, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
	0x06C1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
	0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7,
	0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0640, 0x0642, 0x0643,
	0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7,
	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
	0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7,
	0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x06D2
}

#elif _CODE_PAGE == 1257
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1257(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021,
	0x0000, 0x2030, 0x0000, 0x2039, 0x0000, 0x00A8, 0x02C7, 0x00B8,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x00AF, 0x02DB, 0x0000,
	0x00A0, 0x0000, 0x00A2, 0x00A3, 0x00A4, 0x0000, 0x00A6, 0x00A7,
	0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
	0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
	0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
	0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
	0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
	0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
	0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
	0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
	0x0173, 0x014E, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
};

#elif _CODE_PAGE == 1258
#define _TBLDEF 1
static
const WCHAR Tbl[] = {	/*  CP1258(0x80-0xFF) to Unicode conversion table */
	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
	0x02C6, 0x2030, 0x0000, 0x2039, 0x0152, 0x0000, 0x0000, 0x0000,
	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
	0x02DC, 0x2122, 0x0000, 0x203A, 0x0153, 0x0000, 0x0000, 0x0178,
	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
	0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x0300, 0x00CD, 0x00CE, 0x00CF,
	0x0110, 0x00D1, 0x0309, 0x00D3, 0x00D4, 0x01A0, 0x00D6, 0x00D7,
	0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x01AF, 0x0303, 0x00DF,
	0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0301, 0x00ED, 0x00EE, 0x00EF,
	0x0111, 0x00F1, 0x0323, 0x00F3, 0x00F4, 0x01A1, 0x00F6, 0x00F7,
	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x01B0, 0x20AB, 0x00FF
};

#endif


#if !_TBLDEF || !_USE_LFN
#error This file is not needed in current configuration. Remove from the project.
#endif


WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
